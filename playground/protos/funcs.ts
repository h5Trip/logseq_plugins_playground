// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "funcs.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Respond
 */
export interface Respond {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: string error = 2;
     */
    error: string;
    /**
     * @generated from protobuf field: string message = 3;
     */
    message: string;
}
/**
 * @generated from protobuf message DownloadImageRequest
 */
export interface DownloadImageRequest {
    /**
     * @generated from protobuf field: repeated string urls = 1;
     */
    urls: string[];
    /**
     * @generated from protobuf field: string savePath = 2;
     */
    savePath: string;
}
/**
 * @generated from protobuf message DownloadImageRespond
 */
export interface DownloadImageRespond {
    /**
     * @generated from protobuf field: Respond respond = 1;
     */
    respond?: Respond;
    /**
     * @generated from protobuf field: DownloadImageRequest downloadImageRequest = 2;
     */
    downloadImageRequest?: DownloadImageRequest;
}
// @generated message type with reflection information, may provide speed optimized methods
class Respond$Type extends MessageType<Respond> {
    constructor() {
        super("Respond", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Respond>): Respond {
        const message = { code: 0, error: "", message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Respond>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Respond): Respond {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string error */ 2:
                    message.error = reader.string();
                    break;
                case /* string message */ 3:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Respond, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string error = 2; */
        if (message.error !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.error);
        /* string message = 3; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Respond
 */
export const Respond = new Respond$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DownloadImageRequest$Type extends MessageType<DownloadImageRequest> {
    constructor() {
        super("DownloadImageRequest", [
            { no: 1, name: "urls", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "savePath", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DownloadImageRequest>): DownloadImageRequest {
        const message = { urls: [], savePath: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DownloadImageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DownloadImageRequest): DownloadImageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string urls */ 1:
                    message.urls.push(reader.string());
                    break;
                case /* string savePath */ 2:
                    message.savePath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DownloadImageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string urls = 1; */
        for (let i = 0; i < message.urls.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.urls[i]);
        /* string savePath = 2; */
        if (message.savePath !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.savePath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DownloadImageRequest
 */
export const DownloadImageRequest = new DownloadImageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DownloadImageRespond$Type extends MessageType<DownloadImageRespond> {
    constructor() {
        super("DownloadImageRespond", [
            { no: 1, name: "respond", kind: "message", T: () => Respond },
            { no: 2, name: "downloadImageRequest", kind: "message", T: () => DownloadImageRequest }
        ]);
    }
    create(value?: PartialMessage<DownloadImageRespond>): DownloadImageRespond {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DownloadImageRespond>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DownloadImageRespond): DownloadImageRespond {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Respond respond */ 1:
                    message.respond = Respond.internalBinaryRead(reader, reader.uint32(), options, message.respond);
                    break;
                case /* DownloadImageRequest downloadImageRequest */ 2:
                    message.downloadImageRequest = DownloadImageRequest.internalBinaryRead(reader, reader.uint32(), options, message.downloadImageRequest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DownloadImageRespond, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Respond respond = 1; */
        if (message.respond)
            Respond.internalBinaryWrite(message.respond, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* DownloadImageRequest downloadImageRequest = 2; */
        if (message.downloadImageRequest)
            DownloadImageRequest.internalBinaryWrite(message.downloadImageRequest, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DownloadImageRespond
 */
export const DownloadImageRespond = new DownloadImageRespond$Type();
/**
 * @generated ServiceType for protobuf service Funcs
 */
export const Funcs = new ServiceType("Funcs", [
    { name: "downloadImageToSave", options: {}, I: DownloadImageRequest, O: DownloadImageRespond }
]);
